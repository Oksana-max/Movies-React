{"version":3,"file":"static/js/978.fe4408be.chunk.js","mappings":"4LACA,GAAgB,MAAQ,qBAAqB,eAAiB,8BAA8B,YAAc,2BAA2B,kBAAoB,iCAAiC,gBAAkB,gC,uCCKtMA,GAAeC,EAAAA,EAAAA,OAAK,kBAAM,6BAAoD,IAErE,SAASC,IAkBtB,IAjBA,IAgBIC,EAhBJC,GAA0BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/BI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAAwBL,EAAAA,EAAAA,UAAS,GAAEM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA5BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAEpBG,GAAkCT,EAAAA,EAAAA,WAAS,GAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAzCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAA8Cb,EAAAA,EAAAA,WAAS,GAAKc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAArDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAEpCG,GADSC,EAAAA,EAAAA,MACgBC,SAASC,QAAQ,UAAW,IAW3DC,EAAA,EAAAC,EAA2BC,OAAOC,QAVnB,CACbC,OAAQ,6CACRC,OAAQ,uCACRC,UAAW,yDACXC,SAAU,mDACVC,OAAQ,iCACRC,WAAY,+DACZC,MAAO,mCAGwCV,EAAAC,EAAAU,OAAAX,IAAE,CAA9C,IAAAY,GAAA/B,EAAAA,EAAAA,GAAAoB,EAAAD,GAAA,GAAOa,EAAGD,EAAA,GAAEE,EAAKF,EAAA,GAChBC,IAAQjB,IACVnB,EAAQqC,EAEZ,EAEAC,EAAAA,EAAAA,YAAU,YACR,WACE,IAAIC,EAAY,oDAAAC,OAAuDxC,EAAK,WAAAwC,OAvBlE,GAuBiF,UAAAA,OAAS/B,GAEpGgC,MAAMF,EAAc,CAClBG,OAAQ,MACRC,QAAS,CACP,YAAaC,qCAGdC,MAAK,SAACC,GAAI,OAAKA,EAAKC,MAAM,IAC1BF,MAAK,SAACG,GACL1C,EAAS,GAADkC,QAAAS,EAAAA,EAAAA,GAAK5C,IAAK4C,EAAAA,EAAAA,GAAKD,EAAKE,QAC5BpC,GAAa,GACbI,GAAmB,EACrB,GACJ,CACAiC,EACF,GAAG,CAACnD,EAAOS,EAvCG,KA8Cd,OAAOI,GACLuC,EAAAA,EAAAA,KAACC,EAAAA,EAAQ,KAETC,EAAAA,EAAAA,MAAA,WAASC,UAAWC,EAAEnD,MAAMoD,SAAA,EAC1BL,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAEE,eAAeD,SAC9BpD,EAAMsD,KAAI,SAACC,EAAIC,GAAK,OACnBT,EAAAA,EAAAA,KAACvD,EAAY,CAAC+D,GAAIA,EAAIC,MAAOA,GAAS,OAI1CT,EAAAA,EAAAA,KAAA,UAAQG,UAAWC,EAAEM,gBAAiBC,QAfvB,WACjB7C,GAAmB,GACnBR,EAAQD,EAAO,EACjB,EAY8DgD,SACvDxC,EAAkB,sDAAgB,yEAErCmC,EAAAA,EAAAA,KAAA,OAAKG,UAAWC,EAAEQ,sBAGxB,C","sources":["webpack://app-movies/./src/pages/Films/Films.module.scss?b2d2","pages/Films/Films.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"films\":\"Films_films__Um9mn\",\"films__wrapper\":\"Films_films__wrapper__BTOJ-\",\"films__link\":\"Films_films__link__6NIeI\",\"films__pagination\":\"Films_films__pagination__HzBD+\",\"films__loadMore\":\"Films_films__loadMore__7QpVf\"};","import React, { useState, useEffect, lazy } from \"react\";\r\nimport s from \"./Films.module.scss\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport noImg from \"../../images/noImg.jpg\";\r\nimport Skeleton from \"../../components/Skeleton/Skeleton.jsx\";\r\n\r\nconst CardForFilms = lazy(() => import(\"../../components/CardForFilms/CardForFilms\"));\r\n\r\nexport default function Films() {\r\n  const [films, setFilms] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const limit = 18;\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isLoadingForBtn, setIsLoadingForBtn] = useState(true);\r\n  let location = useLocation();\r\n  const genresFromUrl = location.pathname.replace(\"/films/\", \"\");\r\n  const genres = {\r\n    comedy: \"комедия\",\r\n    boevik: \"боевик\",\r\n    melodrama: \"мелодрама\",\r\n    semejnyj: \"семейный\",\r\n    uzhasy: \"ужасы\",\r\n    fantastika: \"фантастика\",\r\n    drama: \"драма\",\r\n  };\r\n  let genre;\r\n  for (const [key, value] of Object.entries(genres)) {\r\n    if (key === genresFromUrl) {\r\n      genre = value;\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    function getMovies() {\r\n      let protectedUrl = `https://api.kinopoisk.dev/v1.3/movie?genres.name=${genre}&limit=${limit}&page=${page}`;\r\n\r\n      fetch(protectedUrl, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"X-API-KEY\": process.env.REACT_APP_KEY,\r\n        },\r\n      })\r\n        .then((resp) => resp.json())\r\n        .then((data) => {\r\n          setFilms([...films, ...data.docs]);\r\n          setIsLoading(false);\r\n          setIsLoadingForBtn(false);\r\n        });\r\n    }\r\n    getMovies();\r\n  }, [genre, page, limit]);\r\n\r\n  const OnLoadMore = () => {\r\n    setIsLoadingForBtn(true);\r\n    setPage(page + 1);\r\n  };\r\n\r\n  return isLoading ? (\r\n    <Skeleton />\r\n  ) : (\r\n    <section className={s.films}>\r\n      <div className={s.films__wrapper}>\r\n        {films.map((el, index) => (\r\n          <CardForFilms el={el} index={index} />\r\n        ))}\r\n      </div>\r\n\r\n      <button className={s.films__loadMore} onClick={OnLoadMore}>\r\n        {isLoadingForBtn ? \"Загрузка...\" : \"Показать еще\"}\r\n      </button>\r\n      <div className={s.films__pagination}></div>\r\n    </section>\r\n  );\r\n}\r\n"],"names":["CardForFilms","lazy","Films","genre","_useState","useState","_useState2","_slicedToArray","films","setFilms","_useState3","_useState4","page","setPage","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","isLoadingForBtn","setIsLoadingForBtn","genresFromUrl","useLocation","pathname","replace","_i","_Object$entries","Object","entries","comedy","boevik","melodrama","semejnyj","uzhasy","fantastika","drama","length","_Object$entries$_i","key","value","useEffect","protectedUrl","concat","fetch","method","headers","process","then","resp","json","data","_toConsumableArray","docs","getMovies","_jsx","Skeleton","_jsxs","className","s","children","films__wrapper","map","el","index","films__loadMore","onClick","films__pagination"],"sourceRoot":""}